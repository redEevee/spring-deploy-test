name: Deploy

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: spring-backend
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/spring-backend:latest

jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Create application.yaml for CD Deploy
        run: echo "${{ secrets.PRODUCTION_ENV }}" > .env

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 멀티아키텍처 빌드 준비
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & Push (multi-arch)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ${{ env.DOCKER_IMAGE }} \
            -f Dockerfile \
            --push .

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, deploy-spring-test]
    steps:
      - name: Deploy to Production (SSH into EC2)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST_IP }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            cd /home/ec2-user/spring-deploy-test
            docker-compose down || true

            # EC2에서 GHCR에 pull 하려면 PAT 필요 (read:packages 권한)
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.ACTOR }} --password-stdin

            docker pull ${{ env.DOCKER_IMAGE }}
            docker image prune -f
            docker logout

            docker-compose up -d
