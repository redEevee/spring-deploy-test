name: Deploy

on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Create .env for CD Deploy
        run: echo "${{ secrets.PRODUCTION_ENV }}" > .env

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (GITHUB_TOKEN)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # owner를 소문자로 만들고 표준 태그 생성
      - name: Set image tag (lowercase owner)
        id: meta
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LC}/spring-backend:latest"
          echo "DOCKER_IMAGE=${IMAGE}" >> $GITHUB_ENV
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT

      - name: Build & Push (multi-arch)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -f Dockerfile \
            -t "${DOCKER_IMAGE}" \
            --push .

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, deploy-spring-test]
    env:
      DOCKER_IMAGE: ${{ needs.build.outputs.image }}
    steps:
      - name: Deploy to Production
        run: |
          set -e
          echo "Starting Backend Production Deployment"
          cd /home/ec2-user/spring-deploy-test
          docker-compose down || true

          # GHCR pull: PAT 사용(읽기 권한 필요: read:packages)
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_ACTOR }} --password-stdin

          docker pull "${DOCKER_IMAGE}"
          docker image prune -f
          docker logout

          docker-compose up -d
